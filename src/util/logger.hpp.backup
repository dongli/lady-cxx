#ifndef __LADY_Logger
#define __LADY_Logger

#include <boost/log/trivial.hpp>
#include <boost/log/expressions.hpp>
#include <boost/log/sources/severity_feature.hpp>
#include <boost/log/sources/severity_logger.hpp>
#include <boost/log/utility/setup/common_attributes.hpp>
#include <boost/log/utility/setup/console.hpp>
#include <boost/log/utility/setup/common_attributes.hpp>
#include <iostream>
#include <iomanip>

/**
 *  Usage:
 *
 *    logger::error << "This is an error message." << std::endl;
 *    logger::warn << "This is a warn message." << std::endl;
 *    logger::note << "This is a note message" << std::endl;
 */

namespace lady {
namespace logger {

  using namespace boost::log;

  enum ErrorHandling { EXCEPTION, EXIT };

  enum SeverityLevel { DEBUG, NOTE, WARN, ERROR };
  template< typename CharT, typename TraitsT >
  inline std::basic_ostream<CharT, TraitsT>& operator<< (std::basic_ostream<CharT, TraitsT>& os, SeverityLevel lvl)
  {
    static const char* const str[] = { "DEBUG", "NOTE", "WARN", "ERROR" };
    if (static_cast<std::size_t>(lvl) < (sizeof(str) / sizeof(*str)))
      os << str[lvl];
    else
      os << static_cast<int>(lvl);
    return os;
  }

  static sources::severity_logger<SeverityLevel> instance;

  // Severity note ostream
  class Note : public std::ostream {
    static record rec;
    static record_ostream ros;
  public:
    Note() : std::ostream() {}
    ~Note() {}

    template <typename T>
    friend Note& operator<<(Note &note, const T &content) {
      if (!rec) {
        rec.reset();
        rec = logger::instance.open_record(keywords::severity = NOTE);
        ros.attach_record(rec);
      }
      if (rec) ros << content;
    }

    friend Note& operator<<(Note &note, std::ostream& (*f)(std::ostream&)) {
      ros.flush();
      logger::instance.push_record(boost::move(rec));
    }
  };
  static Note note;

  class Warn : public std::ostream {
    static record rec;
    static record_ostream ros;
  public:
    Warn() : std::ostream() {}
    ~Warn() {}

    template <typename T>
    friend Warn& operator<<(Warn &warn, const T &content) {
      if (!rec) {
        rec.reset();
        rec = logger::instance.open_record(keywords::severity = WARN);
        ros.attach_record(rec);
      }
      if (rec) ros << content;
    }

    friend Warn& operator<<(Warn &warn, std::ostream& (*f)(std::ostream&)) {
      ros.flush();
      logger::instance.push_record(boost::move(rec));
    }
  };
  static Warn warn;

  class Error : public std::ostream {
    static record rec;
    static record_ostream ros;
  public:
    Error() : std::ostream() {}
    ~Error() {}

    template <typename T>
    friend Error& operator<<(Error &error, const T &content) {
      if (!rec) {
        rec.reset();
        rec = logger::instance.open_record(keywords::severity = ERROR);
        ros.attach_record(rec);
      }
      if (rec) ros << content;
    }

    friend Error& operator<<(Error &error, std::ostream& (*f)(std::ostream&)) {
      ros.flush();
      logger::instance.push_record(boost::move(rec));
      exit(1);
    }

    friend Error& operator<<(Error &error, const ErrorHandling &e) {
      throw std::runtime_error("check");
      ros.flush();
      logger::instance.push_record(boost::move(rec));
      exit(1);
    }
  };
  static Error error;

  void init();
}}

#endif
